#!/usr/bin/env perl

use strict;
use warnings;
use XML::Simple;
use Data::Dumper;
use Getopt::Long;

my $build_opt      = undef;
my $package_opt    = undef;
my $revision_opt   = undef;
my $release_opt    = undef;
my $ldd_opt        = undef;
my $ldd_args_opt   = undef;
my $libexecdir_opt = undef;

GetOptions ("build=s"      => \$build_opt,
            "package=s"    => \$package_opt,
            "revision=s"   => \$revision_opt,
            "release=s"    => \$release_opt,
            "ldd=s"        => \$ldd_opt,
            "ldd_args=s"   => \$ldd_args_opt,
            "libexecdir=s" => \$libexecdir_opt);

sub read_xml_file
{
  my ($file_name) = @_;
  my $xml = undef;
  open FROM, "< $file_name";
  my (@lines) = <FROM>;
  foreach my $line (@lines)
    {
      $xml .= $line;
    }
  close FROM;
  return XMLin ($xml);
}

sub make_package
{
  my ($pkg_prefix) = @_;
  # detect that we've probably built the package
  if (-f "target/$pkg_prefix.jar")
    {
      # create fw directories
      `test -d fw-pkgout || mkdir fw-pkgout`;
      `test -d fw-pkgtmp || mkdir fw-pkgtmp`;
      `cd fw-pkgtmp && ln -sf ../target/$pkg_prefix.jar .`;
      `cd fw-pkgtmp && ln -sf ../pom.xml $pkg_prefix.pom`;
      `cd fw-pkgtmp && md5sum $pkg_prefix.jar | cut -f1 -d' ' > $pkg_prefix.jar.md5`;
      `cd fw-pkgtmp && md5sum $pkg_prefix.pom | cut -f1 -d' ' > $pkg_prefix.pom.md5`;
      `cd fw-pkgtmp && sha1sum $pkg_prefix.jar | cut -f1 -d' ' > $pkg_prefix.jar.sha1`;
      `cd fw-pkgtmp && sha1sum $pkg_prefix.pom | cut -f1 -d' ' > $pkg_prefix.pom.sha1`;
      `cd fw-pkgtmp && tar chvfz ../fw-pkgout/$pkg_prefix.tar.gz $pkg_prefix.*`;
      `rm -rf fw-pkgtmp`;
    }
  else
    {
      print "ERROR: jar has not been made";
      exit 1;
    }
}

my $data = read_xml_file ("./pom.xml");

my $version = $data->{'version'};
my $name    = $data->{'artifactId'};

my $pkg_prefix = "$name-$version";
my $tar_file   = "$pkg_prefix.tar.gz";

# construct tag
(my $tag_version = $version) =~ tr [\.] [_];
my $tag = "mvn-$tag_version-noarch";

if (system ("fw-exec", "revision/$revision_opt/check-up-to-date") != 0)
  {
    if ($release_opt eq "yes")
      {
        die "ERROR: cannot release package in this state, ",
            "local project is not up to date: $?";
      }
    else
      {
        warn "WARNING: local project is not up to date: $?";
      }
  }

if (system ("fw-exec", "revision/$revision_opt/check-for-tag",
            "--tag", "$tag", "--template", "script") != 0)
  {
    if ($release_opt eq "yes")
      {
        die "ERROR: cannot release package in this state, ",
            "tag '$tag' already exists: $?";
      }
    else
      {
        warn "WARNING: tag '$tag' already exists: $?";
      }
  }

unless (-f "fw-pkgout/$tar_file")
  {
    make_package ($pkg_prefix);
  }

if ($release_opt eq "yes")
  {
    my $repo_host = "codex.pasadena.openx.org";
    my $repo_user = "mavenrepo";
    my $repo_path = "/var/www/html/codex.openx.org/maven2";

    # construct the path for the remote side
    my $group_path = $data->{'groupId'};
    $group_path =~ tr [\.] [\/];
    my $path = join ("/", ($repo_path,
                           $group_path,
                           $data->{'name'},
                           $data->{'version'}));

    system ("fw-exec", "revision/$revision_opt/tag",
            "--tag", "$tag", "--template", "script") == 0
      or die "ERROR: creating tag '$tag' failed: $?";

    my $ssh_host = $repo_user."@".$repo_host;
    system ("ssh", $ssh_host, "mkdir -p $path") == 0
      or die "ERROR: unable to create remote path [$path]: $?";

    system ("scp", "fw-pkgout/$tar_file", $ssh_host.":".$path) == 0
      or die "ERROR: unable to scp files to repo: $?";

    my $cmd = "cd $path && tar xvfz $tar_file && rm -f $tar_file";
    system ("ssh", $ssh_host, $cmd) == 0
      or die "ERROR: unable to untar remote files: $?";
}

0;
