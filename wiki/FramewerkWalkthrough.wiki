#summary Basic introduction to framewerk.

= Introduction =

Framewerk ships with support for:
  * automake build
  * cvs revision control
  * debian packaging
  * script template
This particular combination of features is packed into the initial tarball because framewerk is self-building so this was the set of things I needed to get going.

This walkthrough demonstrates framewerk via the script template.

= Prerequisites =

Framewerk installed.

= Details =

= Initialize the project =

First, set up the project with fw-init [[#Footnote_1 1]].
{{{
% env CVSROOT="YOURCVSROOT" fw-init --name myproject --template script --revision cvs
% cd myproject
% cvs -n -q up
A .cvsignore
A AUTHORS
A ChangeLog
A Makefile.am.local
A NEWS
A README
A bootstrap
A configure.ac.local
A bin/.cvsignore
A bin/Makefile.am.local
A bin/myscript
A fw-pkgin/.cvsignore
A fw-pkgin/Makefile.am.local
A fw-pkgin/config
A fw-pkgin/post-install
A fw-pkgin/post-remove
A fw-pkgin/pre-install
A fw-pkgin/pre-remove
A fw-pkgin/start
A fw-pkgin/stop
A tests/.cvsignore
A tests/Makefile.am.local
A tests/testmyscript
}}}
Notice {{{.cvsignore}}} files have been made by the template.  When using other revision control systems the appropriate actions are taken to ignore files that the template feels should not be in revision control (e.g., for automake build based templates, Makefiles are generated and therefore not checked in).

= Build the project =

All framewerk projects build the same way.
{{{
% ./bootstrap && ./build
}}}
The template should have created a working project which can be built in this way or the template has a bug.

= Footnotes =

== Footnote 1 ==
Alternatively, if you are too young to remember cvs, you can initialize the project without revision control.
{{{
% fw-init --name mynorevproject --template script --revision none
}}}