#summary Me sorting out what the differences between deb and rpm package hooks are.
 
= Introduction =

I'm adding RPM support to framewerk.  It turns out, unsurprisingly, the package scripts have different semantics in RPM vs. DEB.  Most people will probably just develop for one or the other so they can write scripts into {{{fw-pkgin/}}} that don't work for both, no big deal.  However sometimes cross-packaging hooks need to be written (e.g., automatic [http://code.google.com/p/erlrc/ erlrc] integration into fw-template-erlang [FwTemplateErlangWalkthrough fw-template-erlang]), which is the point of the {{{make-hook}}} package method, but now I have to figure it out.

From an [http://fedoraproject.org/wiki/Packaging/ScriptletSnippets RPM reference] and a [http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html DEB reference], I cobbled together this understanding.

= Install =

|| RPM || DEB ||
||  %pretrans of new package || - ||
|| %pre of new package || new-preinst install ||
|| _new package installed_ || _new package files unpacked_ ||
|| %post of new package || - ||
|| %posttrans of new package || postinst configure most-recently-configured-version ||

Note the arguments are different:
  * RPM passes an installation count to scriptlets, and does not pass previous version information.
  * DEB passes a sum type argument to scriptlets, as well as previous version information.

= Updates =

|| RPM || DEB ||
||  %pretrans of new package || new-prerm failed-upgrade old-version[[#2 2]] ||
||  %pre of new package || new-preinst upgrade old-version ||
|| _new package installed_ || _new package files unpacked_ ||
|| %post of new package || - ||
|| %preun of old package || old-postrm upgrade new-version [[#1 1]]  || 
|| _removal of old package_ || _"old but not new" package files removed_ ||
|| %postun of old package || - ||
|| %posttrans of new package || postinst configure most-recently-configured-version ||

Correspondence here is sketchy, due to the different models: RPM {{{%postun}}} happens after the old packages' files are removed, whereas DEB {{{postrm}}} happens after the new packages' files are installed but before the old packages' files are removed.

Again the arguments are different, and the result is more painful here because knowing previous version information is more critical for upgrade than for install (where there is no previous version) or remove (where the current version is the previous version).  Recent versions of RPM can be called from scriptlets but presumably {{{rpm -q}}} will return a different result after the _new package installed_ step in the above chain.

= Footnotes =

== 1 ==

{{{new-postrm failed-upgrade old-version}}} is invoked if {{{old-postrm upgrade new-version}}} fails, so one can ensure the new postrm is always called if desired.

== 2 ==
Actually {{{old-prerm upgrade new-version}}} is invoked first, but if this fails, then {{{new-preinst upgrade old-version}}} has a chance to "handle the exception".  Since RPM uses the new script for {{{%pretrans}}}, I corresponded it with {{{new-preinst}}}.  In practice this means {{{old-prerm upgrade new-version}}} should just be {{{exit 1}}}.