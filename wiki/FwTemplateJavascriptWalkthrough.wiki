#summary Basic introduction to fw-template-javascript.

= Introduction =

fw-template-javascript is the framewerk javascript development template.  It provides a few extras above the bare-bones fw-template-script that are useful for javascript development:
  * [http://www.jslint.com/lint.html jslint] integration
  * [http://developer.yahoo.com/yui/compressor/ yuicompressor] integration
  * rules to drive the javascript shell for writing tests

This walkthrough demonstrates fw-template-javascript.

= Prerequisites =

[FwTemplateJavascriptInstall fw-template-javascript installed]

It's very helpful to have done the [FramewerkWalkthrough framewerk walkthrough].

= Details =

== Initialize the project ==

First, set up the project with fw-init [FramewerkWalkthrough#Initialize_the_project in the usual way].
{{{
% env CVSROOT="YOURCVSROOT" fw-init --name myproject --template javascript --revision cvs
}}}
Changing directory into the project,
{{{
% cd myproject/
% cvs -n -q up
A .cvsignore
A AUTHORS
A ChangeLog
A Makefile.am.local
A NEWS
A README
A bootstrap
A configure.ac.local
A fw-pkgin/.cvsignore
A fw-pkgin/Makefile.am.local
A fw-pkgin/config
A fw-pkgin/post-install
A fw-pkgin/post-remove
A fw-pkgin/pre-install
A fw-pkgin/pre-remove
A fw-pkgin/start
A fw-pkgin/stop
A src/.cvsignore
A src/Makefile.am.local
A src/mylib.js
A tests/.cvsignore
A tests/Makefile.am.local
A tests/testmylib.js
}}}

== Anatomy of the top level ==

The root directory of the project now looks like:
{{{
% ls
AUTHORS  ChangeLog          NEWS    bootstrap*          fw@        src/
CVS/     Makefile.am.local  README  configure.ac.local  fw-pkgin/  tests/
}}}
Here's a breakdown:
  * {{{AUTHORS, CVS, ChangeLog, NEWS, README, bootstrap, fw, fw-pkgin, configure.ac.local, Makefile.am.local}}}: these have the same meanings as in [FramewerkWalkthrough#Anatomy_of_the_top_level other framewerk templates].
  * {{{src, tests}}}: Javascript source code (.js) is placed in {{{src/}}}, and unit tests in {{{tests/}}}.

== Configure the project ==

As with [FramewerkWalkthrough#Configure_the_project other framewerk templates], {{{fw-pkgin/config}}} is used to configure the project.  There are no new variables associated with this template beyond the defaults.
{{{
% cat fw-pkgin/config
# The FW_PACKAGE_MAINTAINER field is populated with the 
# environment variable FW_PACKAGE_DEFAULT_MAINTAINER if non-empty

FW_PACKAGE_NAME="myproject"
FW_PACKAGE_VERSION="0.0.0"
FW_PACKAGE_MAINTAINER="Paul Mineiro <paul-fw@mineiro.com>"
FW_PACKAGE_SHORT_DESCRIPTION="A short description."
FW_PACKAGE_DESCRIPTION=`cat README`
FW_PACKAGE_ARCHITECTURE_DEPENDENT="0"

# Dependency information.  The native syntax corresponds to Debian,
# http://www.debian.org/doc/debian-policy/ch-relationships.html
# Section 7.1 "Syntax of Relationship Fields"
# 
# For other packaging systems, the syntax is translated for you.

FW_PACKAGE_DEPENDS=""
FW_PACKAGE_CONFLICTS=""
FW_PACKAGE_PROVIDES=""
FW_PACKAGE_REPLACES=""
FW_PACKAGE_SUGGESTS=""

FW_PACKAGE_BUILD_DEPENDS=""
FW_PACKAGE_BUILD_CONFLICTS=""
}}}

== Build the project ==

Build the project [FramewerkWalkthrough#Build_the_project the usual way],
{{{
% ./bootstrap && ./build
}}}

=== jslint integration ===

fw-template-javascript expects a binary called {{{jslint}}} to be in the path, otherwise it prints a warning message and skips jslint checks.  If you are using the [http://www.jslint.com/rhino/index.html rhino command line version] then a script like
{{{
#! /bin/sh

java org.mozilla.javascript.tools.shell.Main /PATH/TO/jslint.js "$@"
}}}
is sufficient.

=== yuicompressor integration ===

fw-template-javascript expects a binary called {{{yuicompressor}}} to be in the path, otherwise it prints a warning message and does identity (i.e., no) compression of javascript.  A script like
{{{
#! /bin/sh

java -jar /PATH/TO/yuicompressor-2.4.2.jar "$@"
}}}
is sufficient.

=== javascript shell integration ===

fw-template-javascript expects to be able to invoke a javascript shell via the following command
{{{
java org.mozilla.javascript.tools.shell.Main FILENAME
}}}
[http://www.mozilla.org/rhino/ rhino] is what I use to satisfy this requirement.

== Anatomy of src/ ==

The {{{src/}}} directory should contain something like
{{{
% ls src
CVS/      Makefile.am@       Makefile.in  myproject-uncompressed.js
Makefile  Makefile.am.local  mylib.js     myproject.js
}}}
Here's the breakdown:
  * {{{CVS}}}: revision control specific
  * {{{Makefile.in, Makefile}}}: generated by automake/autoconf
  * {{{Makefile.am}}}: a link to the Makefile.am installed with fw-template-javascript
  * {{{Makefile.am.local}}}: this is where you can put any additional (auto)make commands beyond what is supplied by the template.
  * {{{mylib.js}}}: simple example javascript source code that you might have written
  * {{{myproject-uncompressed.js}}}: all the javascript source code files concatenated together
     * by default the order of concatenation is whatever order the [http://www.gnu.org/software/autoconf/manual/make/Wildcard-Function.html#Wildcard-Function wildcard function] in [http://www.gnu.org/software/make/ gnu make] returns things in, but you can change that if order matters. 
  * {{{myproject.js}}}: compressed version of {{{myproject-uncompressed.js}}}
     * typically you serve the compressed javascript for efficiency, but when you are debugging you serve the uncompressed version for sanity.

=== src/Makefile.am.local ===

{{{src/Makefile.am.local}}} is initialized with some reasonable rules.

{{{
% cat src/Makefile.am.local 
# put whatever (auto)make commands here, they will be included from Makefile.am
#
pkglibdir=$(libdir)/@FW_PACKAGE_NAME@

pkglib_DATA =                           \
  @FW_PACKAGE_NAME@.js                  \
  @FW_PACKAGE_NAME@-uncompressed.js

jsfiles := $(filter-out $(pkglib_DATA), $(wildcard *.js))

@FW_PACKAGE_NAME@-uncompressed.js: $(jsfiles)
        cat $^ > $@

check_DATA =                            \
  $(patsubst %.js, .%.js_ok, $(jsfiles))

CLEANFILES +=                           \
  $(pkglib_DATA)

EXTRA_DIST +=                           \
  $(jsfiles)
}}}

Basically:
  * check each individual js file with jslint
  * combine all the js files into a single combined uncompressed file
  * compressed the combined uncompressed file
  * install the compressed and uncompressed combined javascript files into /prefix/lib/PACKAGENAME

== Anatomy of tests/ ==

{{{
% ls tests/
CVS/      Makefile.am@       Makefile.in          testmylib.js
Makefile  Makefile.am.local  js-test-wrapper.sh@
}}}

{{{tests/js-test-wrapper.sh}}} is used to run the tests.  It
recognizes tests of the form {{{something.js}}} and interprets that
as a directive to invoke the javascript shell on that file; other tests are 
just invoked directly.

{{{testmylib.js}}} is an example test.  It leverages [https://developer.mozilla.org/en/Rhino_Shell rhino's load() function] to import the code being tested and then exercises it.
{{{
% cat tests/testmylib.js
load ('../src/mylib.js');

(function (a) {
   if (MyLib.dude (0) === "my car")
     {
       quit ();
     }
   else
     {
       quit (1);
     }
}) (arguments);
}}}

== Making a package ==

Making a package is done [FramewerkWalkthrough#Making_a_package the usual way], as is [FramewerkWalkthrough#Releasing_a_package releasing a package].  

= Conclusion =

Congratulations!  You've made it through the fw-template-javascript walkthrough. 
Hopefully you found it helpful.